#!/usr/bin/python
# vim: set ts=2 expandtab:
"""
Module: set_list.py
Desc: use dbus to put simple lists on live video
Author: John O'Neil
Email: oneil.john@gmail.com
DATE: Friday, December 20th 2013
  
""" 
from color import Color
import dbus
import argparse
from traceback import print_exc
import sys
import jsonpickle
from list import List

def main():
  parser = argparse.ArgumentParser(description='Add text lists to a live video.')
  parser.add_argument('-n', '--new', help='Friendly name of new list to add.')
  parser.add_argument('-a', '--add', help='Friendly name of new list to add message to.')
  parser.add_argument('-m', '--message', help='The actual text to add. Can include time and pango markup.', default='')
  parser.add_argument('-r', '--remove', help='Remove a list with specified friendly name')
  parser.add_argument('-c', '--clear', help='Clear a particular list using friendlyname')
  parser.add_argument('-x', '--x_pos', help='x position of text on screen', default=300,type=int)
  parser.add_argument('-y', '--y_pos', help='y position of text on screen', default=300,type=int)
  parser.add_argument('-w', '--width', help='Max width of list in pixels.', default=200, type=int)
  parser.add_argument('-s', '--size', help='Max number of list elements.', default=10, type=int)
  parser.add_argument('-v', '--verbose', help='Verbose operation. Print status messages during processing', action="store_true")
  parser.add_argument('--shading', help='Show shaded background behind text', action="store_true")
  args = parser.parse_args()
  
  #get ahold of the debus published object and call its methods
  try:
    bus = dbus.SessionBus()
    remote_object = bus.get_object("com.VideoOverlay.List",
                                   "/ListServer")

    list_iface = dbus.Interface(remote_object, "com.VideoOverlay.List")

    msg = ''
    if args.message:
      msg = args.message

    if args.clear:
      list_iface.ClearAllLists()
      return

    if args.remove:
      list_iface.RemoveList(args.remove)

    if args.new:
      l = List(size=args.size, x=args.x_pos, y=args.y_pos, width=args.width, show_shading=args.shading)
      pickled = jsonpickle.encode(l)
      list_iface.AddList(args.new, unicode(pickled))
    
    if args.message and args.add:
      list_iface.AddMsg(args.add, args.message)

  except dbus.DBusException:
    print_exc()
    sys.exit(1)

if __name__ == '__main__':
  main()   
      
